<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F723E-Discovery\STM32F723E-Discovery.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F723E-Discovery\STM32F723E-Discovery.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Feb 20 07:59:25 2021
<BR><P>
<H3>Maximum Stack Usage =        360 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; draw_touch_position &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[104]">compile_layers</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[104]">compile_layers</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream4_IRQHandler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from stm32f7xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from stm32f7xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from stm32f7xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3b]">FMC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[54]">FPU_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5c]">LPTIM1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[48]">OTG_FS_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f7xx_it.o(i.PendSV_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5b]">QUADSPI_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[53]">RNG_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[59]">SAI1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5a]">SAI2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3c]">SDMMC1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5d]">SDMMC2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[57]">SPI4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[58]">SPI5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[7d]">ST7789H2_DisplayOff</a> from st7789h2.o(i.ST7789H2_DisplayOff) referenced from st7789h2.o(.data)
 <LI><a href="#[7c]">ST7789H2_DisplayOn</a> from st7789h2.o(i.ST7789H2_DisplayOn) referenced from st7789h2.o(.data)
 <LI><a href="#[86]">ST7789H2_DrawBitmap</a> from st7789h2.o(i.ST7789H2_DrawBitmap) referenced from st7789h2.o(.data)
 <LI><a href="#[82]">ST7789H2_DrawHLine</a> from st7789h2.o(i.ST7789H2_DrawHLine) referenced from st7789h2.o(.data)
 <LI><a href="#[87]">ST7789H2_DrawRGBImage</a> from st7789h2.o(i.ST7789H2_DrawRGBImage) referenced from st7789h2.o(.data)
 <LI><a href="#[83]">ST7789H2_DrawVLine</a> from st7789h2.o(i.ST7789H2_DrawVLine) referenced from st7789h2.o(.data)
 <LI><a href="#[85]">ST7789H2_GetLcdPixelHeight</a> from st7789h2.o(i.ST7789H2_GetLcdPixelHeight) referenced from st7789h2.o(.data)
 <LI><a href="#[84]">ST7789H2_GetLcdPixelWidth</a> from st7789h2.o(i.ST7789H2_GetLcdPixelWidth) referenced from st7789h2.o(.data)
 <LI><a href="#[7a]">ST7789H2_Init</a> from st7789h2.o(i.ST7789H2_Init) referenced from st7789h2.o(.data)
 <LI><a href="#[7b]">ST7789H2_ReadID</a> from st7789h2.o(i.ST7789H2_ReadID) referenced from st7789h2.o(.data)
 <LI><a href="#[80]">ST7789H2_ReadPixel</a> from st7789h2.o(i.ST7789H2_ReadPixel) referenced from st7789h2.o(.data)
 <LI><a href="#[7e]">ST7789H2_SetCursor</a> from st7789h2.o(i.ST7789H2_SetCursor) referenced from st7789h2.o(.data)
 <LI><a href="#[81]">ST7789H2_SetDisplayWindow</a> from st7789h2.o(i.ST7789H2_SetDisplayWindow) referenced from st7789h2.o(.data)
 <LI><a href="#[7f]">ST7789H2_WritePixel</a> from st7789h2.o(i.ST7789H2_WritePixel) referenced from st7789h2.o(.data)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f7xx_it.o(i.SVC_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5f]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f723xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[55]">UART7_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[56]">UART8_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[60]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f723xx.o(.text)
 <LI><a href="#[62]">concat_build</a> from nnom_concat.o(i.concat_build) referenced from nnom_concat.o(i.Concat)
 <LI><a href="#[61]">concat_run</a> from nnom_concat.o(i.concat_run) referenced from nnom_concat.o(i.Concat)
 <LI><a href="#[6c]">conv2d_build</a> from nnom_conv2d.o(i.conv2d_build) referenced from nnom_conv2d.o(i.conv2d_s)
 <LI><a href="#[6d]">conv2d_free</a> from nnom_conv2d.o(i.conv2d_free) referenced from nnom_conv2d.o(i.conv2d_s)
 <LI><a href="#[6b]">conv2d_run</a> from nnom_conv2d.o(i.conv2d_run) referenced from nnom_conv2d.o(i.conv2d_s)
 <LI><a href="#[79]">default_build</a> from nnom_baselayer.o(i.default_build) referenced from nnom_output.o(i.output_s)
 <LI><a href="#[6f]">dense_build</a> from nnom_dense.o(i.dense_build) referenced from nnom_dense.o(i.dense_s)
 <LI><a href="#[70]">dense_free</a> from nnom_dense.o(i.dense_free) referenced from nnom_dense.o(i.dense_s)
 <LI><a href="#[6e]">dense_run</a> from nnom_dense.o(i.dense_run) referenced from nnom_dense.o(i.dense_s)
 <LI><a href="#[64]">flatten_build</a> from nnom_flatten.o(i.flatten_build) referenced from nnom_flatten.o(i.Flatten)
 <LI><a href="#[63]">flatten_run</a> from nnom_flatten.o(i.flatten_run) referenced from nnom_flatten.o(i.Flatten)
 <LI><a href="#[69]">fputc</a> from lcd_log.o(i.fputc) referenced from printf6.o(i.__0printf$6)
 <LI><a href="#[72]">input_build</a> from nnom_input.o(i.input_build) referenced from nnom_input.o(i.input_s)
 <LI><a href="#[71]">input_run</a> from nnom_input.o(i.input_run) referenced from nnom_input.o(i.input_s)
 <LI><a href="#[5e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[66]">maxpool_build</a> from nnom_maxpool.o(i.maxpool_build) referenced from nnom_maxpool.o(i.MaxPool)
 <LI><a href="#[65]">maxpool_run</a> from nnom_maxpool.o(i.maxpool_run) referenced from nnom_maxpool.o(i.MaxPool)
 <LI><a href="#[77]">model_active</a> from nnom.o(i.model_active) referenced from nnom.o(i.new_model)
 <LI><a href="#[73]">model_add</a> from nnom.o(i.model_add) referenced from nnom.o(i.new_model)
 <LI><a href="#[74]">model_hook</a> from nnom.o(i.model_hook) referenced from nnom.o(i.new_model)
 <LI><a href="#[75]">model_merge</a> from nnom.o(i.model_merge) referenced from nnom.o(i.new_model)
 <LI><a href="#[76]">model_mergex</a> from nnom.o(i.model_mergex) referenced from nnom.o(i.new_model)
 <LI><a href="#[78]">output_run</a> from nnom_output.o(i.output_run) referenced from nnom_output.o(i.output_s)
 <LI><a href="#[6a]">relu_run</a> from nnom_activation.o(i.relu_run) referenced from nnom_activation.o(i.act_relu)
 <LI><a href="#[68]">softmax_build</a> from nnom_softmax.o(i.softmax_build) referenced from nnom_softmax.o(i.Softmax)
 <LI><a href="#[67]">softmax_run</a> from nnom_softmax.o(i.softmax_run) referenced from nnom_softmax.o(i.Softmax)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[60]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[88]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[147]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[148]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[149]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[14c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
</UL>

<P><STRONG><a name="[14d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr_v
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_run
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_run
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast_nonsquare
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_run
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_maxpool_q7_HWC
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast_nonsquare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic_nonsquare
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast_nonsquare
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[155]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[156]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>BSP_LCD_Clear</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_Clear &rArr; BSP_LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[95]"></a>BSP_LCD_DisplayChar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_DisplayChar &rArr; DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[97]"></a>BSP_LCD_DisplayStringAt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DisplayStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAtLine
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[98]"></a>BSP_LCD_DisplayStringAtLine</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DisplayStringAtLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>

<P><STRONG><a name="[99]"></a>BSP_LCD_DrawCircle</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_DrawCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>

<P><STRONG><a name="[94]"></a>BSP_LCD_DrawHLine</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[9a]"></a>BSP_LCD_DrawPixel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DrawPixel))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>

<P><STRONG><a name="[9b]"></a>BSP_LCD_FillCircle</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LCD_FillCircle &rArr; BSP_LCD_DrawCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[9c]"></a>BSP_LCD_FillRect</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_FillRect &rArr; BSP_LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processingdata
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[123]"></a>BSP_LCD_GetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_GetFont))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[93]"></a>BSP_LCD_GetXSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[92]"></a>BSP_LCD_GetYSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_GetYSize))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[9d]"></a>BSP_LCD_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LCD_Init &rArr; BSP_LCD_InitEx &rArr; BSP_LCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>BSP_LCD_InitEx</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LCD_InitEx &rArr; BSP_LCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetOrientation
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[9f]"></a>BSP_LCD_MspInit</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[142]"></a>BSP_LCD_ReadPixel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_ReadPixel))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processingdata
</UL>

<P><STRONG><a name="[dd]"></a>BSP_LCD_SetTextColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processingdata
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>

<P><STRONG><a name="[a4]"></a>BSP_LED_Init</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32f723e_discovery.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>BSP_LED_Toggle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.BSP_LED_Toggle))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_Leds
</UL>

<P><STRONG><a name="[a7]"></a>BSP_PB_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.BSP_PB_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[a9]"></a>BSP_PB_Init</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32f723e_discovery.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>BSP_TS_GetState</STRONG> (Thumb, 302 bytes, Stack size 64 bytes, stm32f723e_discovery_ts.o(i.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetTouchInfo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Get_GestureId
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[ae]"></a>BSP_TS_Get_GestureId</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f723e_discovery_ts.o(i.BSP_TS_Get_GestureId))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetGestureID
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>Concat</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nnom_concat.o(i.Concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Concat &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_s
</UL>

<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>FMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32f7xx_ll_fmc.o(i.FMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[cf]"></a>FMC_NORSRAM_Init</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, stm32f7xx_ll_fmc.o(i.FMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[d0]"></a>FMC_NORSRAM_Timing_Init</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f7xx_ll_fmc.o(i.FMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[b8]"></a>Flatten</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nnom_flatten.o(i.Flatten))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Flatten &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
</UL>

<P><STRONG><a name="[b3]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_Leds
</UL>

<P><STRONG><a name="[ba]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_MspInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
</UL>

<P><STRONG><a name="[a8]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>

<P><STRONG><a name="[a6]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[a0]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[b9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[bb]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[d7]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_GetState), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_I2C_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[bc]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[be]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_MspInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c4]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>

<P><STRONG><a name="[aa]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>

<P><STRONG><a name="[c5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 888 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b7]"></a>HAL_SRAM_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f7xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_SRAM_Init &rArr; FMC_NORSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Timing_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sram.o(i.HAL_SRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>LCD_IO_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.LCD_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DisplayOff
</UL>

<P><STRONG><a name="[db]"></a>LCD_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.LCD_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_IO_Init &rArr; FMC_BANK2_Init &rArr; FMC_BANK2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadID
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_Init
</UL>

<P><STRONG><a name="[e3]"></a>LCD_IO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.LCD_IO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadReg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadPixel
</UL>

<P><STRONG><a name="[e1]"></a>LCD_IO_WriteData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.LCD_IO_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WritePixel
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawHLine
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBHLine
</UL>

<P><STRONG><a name="[e4]"></a>LCD_IO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.LCD_IO_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadReg
</UL>

<P><STRONG><a name="[dc]"></a>LCD_LOG_UpdateDisplay</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lcd_log.o(i.LCD_LOG_UpdateDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_LOG_UpdateDisplay &rArr; BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAtLine
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[de]"></a>MaxPool</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, nnom_maxpool.o(i.MaxPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MaxPool &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>ST7789H2_DisplayOff</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7789H2_DisplayOff &rArr; LCD_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>ST7789H2_DisplayOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7789H2_DisplayOn &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>ST7789H2_DrawBitmap</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, st7789h2.o(i.ST7789H2_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ST7789H2_DrawBitmap &rArr; ST7789H2_DrawRGBHLine &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>ST7789H2_DrawHLine</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7789H2_DrawHLine &rArr; ST7789H2_SetCursor &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>ST7789H2_DrawRGBImage</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, st7789h2.o(i.ST7789H2_DrawRGBImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ST7789H2_DrawRGBImage &rArr; ST7789H2_DrawRGBHLine &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>ST7789H2_DrawVLine</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, st7789h2.o(i.ST7789H2_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ST7789H2_DrawVLine &rArr; ST7789H2_WritePixel &rArr; ST7789H2_SetCursor &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WritePixel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>ST7789H2_GetLcdPixelHeight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st7789h2.o(i.ST7789H2_GetLcdPixelHeight))
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>ST7789H2_GetLcdPixelWidth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st7789h2.o(i.ST7789H2_GetLcdPixelWidth))
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>ST7789H2_Init</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, st7789h2.o(i.ST7789H2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ST7789H2_Init &rArr; LCD_IO_Init &rArr; FMC_BANK2_Init &rArr; FMC_BANK2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DisplayOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>ST7789H2_ReadID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ST7789H2_ReadID &rArr; LCD_IO_Init &rArr; FMC_BANK2_Init &rArr; FMC_BANK2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>ST7789H2_ReadPixel</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_ReadPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7789H2_ReadPixel &rArr; ST7789H2_SetCursor &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[e2]"></a>ST7789H2_ReadReg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7789H2_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadID
</UL>

<P><STRONG><a name="[7e]"></a>ST7789H2_SetCursor</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ST7789H2_SetCursor &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WritePixel
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadPixel
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawVLine
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBImage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawHLine
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>ST7789H2_SetDisplayWindow</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, st7789h2.o(i.ST7789H2_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ST7789H2_SetDisplayWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>ST7789H2_SetOrientation</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_SetOrientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ST7789H2_SetOrientation &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[7f]"></a>ST7789H2_WritePixel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_WritePixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ST7789H2_WritePixel &rArr; ST7789H2_SetCursor &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawVLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>ST7789H2_WriteReg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetOrientation
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WritePixel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadPixel
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawVLine
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawHLine
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DisplayOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DisplayOff
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBHLine
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>Softmax</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nnom_softmax.o(i.Softmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Softmax &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_s
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, system_stm32f7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>TS_IO_Read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stm32f723e_discovery.o(i.TS_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetGestureID
</UL>

<P><STRONG><a name="[e9]"></a>TS_IO_ReadMultiple</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f723e_discovery.o(i.TS_IO_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetTouchInfo
</UL>

<P><STRONG><a name="[ea]"></a>Toggle_Leds</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.Toggle_Leds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Toggle_Leds &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>TouchScreen_Get_Calibrated_X</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ts_calibration.o(i.TouchScreen_Get_Calibrated_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchScreen_Get_Calibrated_X
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[121]"></a>TouchScreen_Get_Calibrated_Y</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ts_calibration.o(i.TouchScreen_Get_Calibrated_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchScreen_Get_Calibrated_Y
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>__0printf$6</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[157]"></a>__1printf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)

<P><STRONG><a name="[103]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tailed_activation
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_analysis_result
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_run
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_memory_block_info
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_add
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
</UL>

<P><STRONG><a name="[158]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[159]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[111]"></a>act_get_dec_bit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nnom_activation.o(i.act_get_dec_bit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_build
</UL>

<P><STRONG><a name="[f0]"></a>act_relu</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nnom_activation.o(i.act_relu))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = act_relu &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[f1]"></a>arm_convolve_1x1_HWC_q7_fast_nonsquare</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, arm_convolve_1x1_hwc_q7_fast_nonsquare.o(i.arm_convolve_1x1_HWC_q7_fast_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = arm_convolve_1x1_HWC_q7_fast_nonsquare &rArr; arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_reordered_no_shift
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[f4]"></a>arm_convolve_HWC_q15_fast</STRONG> (Thumb, 530 bytes, Stack size 144 bytes, arm_convolve_hwc_q15_fast.o(i.arm_convolve_HWC_q15_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arm_convolve_HWC_q15_fast &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[f6]"></a>arm_convolve_HWC_q15_fast_nonsquare</STRONG> (Thumb, 534 bytes, Stack size 144 bytes, arm_convolve_hwc_q15_fast_nonsquare.o(i.arm_convolve_HWC_q15_fast_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arm_convolve_HWC_q15_fast_nonsquare &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[f7]"></a>arm_convolve_HWC_q7_RGB</STRONG> (Thumb, 376 bytes, Stack size 80 bytes, arm_convolve_hwc_q7_rgb.o(i.arm_convolve_HWC_q7_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = arm_convolve_HWC_q7_RGB &rArr; arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[f9]"></a>arm_convolve_HWC_q7_basic</STRONG> (Thumb, 370 bytes, Stack size 96 bytes, arm_convolve_hwc_q7_basic.o(i.arm_convolve_HWC_q7_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = arm_convolve_HWC_q7_basic &rArr; arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_no_shift
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[fb]"></a>arm_convolve_HWC_q7_basic_nonsquare</STRONG> (Thumb, 366 bytes, Stack size 96 bytes, arm_convolve_hwc_q7_basic_nonsquare.o(i.arm_convolve_HWC_q7_basic_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = arm_convolve_HWC_q7_basic_nonsquare &rArr; arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_no_shift
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[fc]"></a>arm_convolve_HWC_q7_fast</STRONG> (Thumb, 990 bytes, Stack size 112 bytes, arm_convolve_hwc_q7_fast.o(i.arm_convolve_HWC_q7_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = arm_convolve_HWC_q7_fast &rArr; arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_reordered_no_shift
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15_reordered
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[fd]"></a>arm_convolve_HWC_q7_fast_nonsquare</STRONG> (Thumb, 1054 bytes, Stack size 112 bytes, arm_convolve_hwc_q7_fast_nonsquare.o(i.arm_convolve_HWC_q7_fast_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = arm_convolve_HWC_q7_fast_nonsquare &rArr; arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_reordered_no_shift
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_nn_mat_mult_kernel_q7_q15_reordered
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[fe]"></a>arm_fully_connected_q7_opt</STRONG> (Thumb, 470 bytes, Stack size 128 bytes, arm_fully_connected_q7_opt.o(i.arm_fully_connected_q7_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = arm_fully_connected_q7_opt &rArr; arm_q7_to_q15_reordered_no_shift
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_q15_reordered_no_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_run
</UL>

<P><STRONG><a name="[ff]"></a>arm_maxpool_q7_HWC</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, arm_pool_q7_hwc.o(i.arm_maxpool_q7_HWC))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = arm_maxpool_q7_HWC &rArr; compare_and_replace_if_larger_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_and_replace_if_larger_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_run
</UL>

<P><STRONG><a name="[f8]"></a>arm_nn_mat_mult_kernel_q7_q15</STRONG> (Thumb, 582 bytes, Stack size 136 bytes, arm_nn_mat_mult_kernel_q7_q15.o(i.arm_nn_mat_mult_kernel_q7_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic_nonsquare
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_RGB
</UL>

<P><STRONG><a name="[f3]"></a>arm_nn_mat_mult_kernel_q7_q15_reordered</STRONG> (Thumb, 356 bytes, Stack size 116 bytes, arm_nn_mat_mult_kernel_q7_q15_reordered.o(i.arm_nn_mat_mult_kernel_q7_q15_reordered))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = arm_nn_mat_mult_kernel_q7_q15_reordered
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast_nonsquare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_HWC_q7_fast_nonsquare
</UL>

<P><STRONG><a name="[fa]"></a>arm_q7_to_q15_no_shift</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, arm_q7_to_q15_no_shift.o(i.arm_q7_to_q15_no_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arm_q7_to_q15_no_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic_nonsquare
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic
</UL>

<P><STRONG><a name="[f2]"></a>arm_q7_to_q15_reordered_no_shift</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, arm_q7_to_q15_reordered_no_shift.o(i.arm_q7_to_q15_reordered_no_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arm_q7_to_q15_reordered_no_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_q7_opt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast_nonsquare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_HWC_q7_fast_nonsquare
</UL>

<P><STRONG><a name="[145]"></a>arm_relu_q15</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_relu_q15.o(i.arm_relu_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_relu_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relu_run
</UL>

<P><STRONG><a name="[144]"></a>arm_relu_q7</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, arm_relu_q7.o(i.arm_relu_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arm_relu_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relu_run
</UL>

<P><STRONG><a name="[139]"></a>block_mem_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nnom.o(i.block_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[102]"></a>check_model_version</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nnom.o(i.check_model_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_model_version &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[104]"></a>compile_layers</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, nnom.o(i.compile_layers))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_hook_length
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_input_mem
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_comp_mem
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_memory_block_info
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_block
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[62]"></a>concat_build</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, nnom_concat.o(i.concat_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = concat_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_concat.o(i.Concat)
</UL>
<P><STRONG><a name="[61]"></a>concat_run</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nnom_concat.o(i.concat_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = concat_run &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_concat.o(i.Concat)
</UL>
<P><STRONG><a name="[110]"></a>concat_s</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nnom_concat.o(i.concat_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = concat_s &rArr; Concat &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Concat
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[6c]"></a>conv2d_build</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, nnom_conv2d.o(i.conv2d_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = conv2d_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_output_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_conv2d.o(i.conv2d_s)
</UL>
<P><STRONG><a name="[6d]"></a>conv2d_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nnom_conv2d.o(i.conv2d_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conv2d_free &rArr; delete_tensor &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_conv2d.o(i.conv2d_s)
</UL>
<P><STRONG><a name="[6b]"></a>conv2d_run</STRONG> (Thumb, 1336 bytes, Stack size 112 bytes, nnom_conv2d.o(i.conv2d_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = conv2d_run &rArr; arm_convolve_HWC_q7_basic_nonsquare &rArr; arm_nn_mat_mult_kernel_q7_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q7_nonsquare
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast_nonsquare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_fast
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic_nonsquare
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_basic
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q7_RGB
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast_nonsquare
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_HWC_q15_fast
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_convolve_1x1_HWC_q7_fast_nonsquare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_conv2d.o(i.conv2d_s)
</UL>
<P><STRONG><a name="[116]"></a>conv2d_s</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, nnom_conv2d.o(i.conv2d_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = conv2d_s &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dilation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[112]"></a>conv_output_length</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nnom_conv2d.o(i.conv_output_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conv_output_length
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
</UL>

<P><STRONG><a name="[79]"></a>default_build</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nnom_baselayer.o(i.default_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = default_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_output.o(i.output_s)
</UL>
<P><STRONG><a name="[113]"></a>delete_tensor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nnom_tensor.o(i.delete_tensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delete_tensor &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_free
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_free
</UL>

<P><STRONG><a name="[6f]"></a>dense_build</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, nnom_dense.o(i.dense_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = dense_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_dense.o(i.dense_s)
</UL>
<P><STRONG><a name="[70]"></a>dense_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nnom_dense.o(i.dense_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dense_free &rArr; delete_tensor &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_dense.o(i.dense_s)
</UL>
<P><STRONG><a name="[6e]"></a>dense_run</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, nnom_dense.o(i.dense_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dense_run &rArr; arm_fully_connected_q7_opt &rArr; arm_q7_to_q15_reordered_no_shift
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fully_connected_q7_opt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_dense.o(i.dense_s)
</UL>
<P><STRONG><a name="[11c]"></a>dense_s</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nnom_dense.o(i.dense_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dense_s &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[119]"></a>dilation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nnom_layers.o(i.dilation))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dilation &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[11e]"></a>draw_touch_position</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, main.o(i.draw_touch_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = draw_touch_position &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Get_Calibrated_Y
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Get_Calibrated_X
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>flatten_build</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nnom_flatten.o(i.flatten_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = flatten_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_flatten.o(i.Flatten)
</UL>
<P><STRONG><a name="[63]"></a>flatten_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nnom_flatten.o(i.flatten_run))
<BR>[Address Reference Count : 1]<UL><LI> nnom_flatten.o(i.Flatten)
</UL>
<P><STRONG><a name="[122]"></a>flatten_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nnom_flatten.o(i.flatten_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flatten_s &rArr; Flatten &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[69]"></a>fputc</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, lcd_log.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fputc &rArr; LCD_LOG_UpdateDisplay &rArr; BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetFont
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LOG_UpdateDisplay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0printf$6)
</UL>
<P><STRONG><a name="[11a]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[af]"></a>ft6x06_TS_GetGestureID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_GetGestureID))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Get_GestureId
</UL>

<P><STRONG><a name="[ad]"></a>ft6x06_TS_GetTouchInfo</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ft6x06.o(i.ft6x06_TS_GetTouchInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft6x06_TS_GetTouchInfo &rArr; TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>

<P><STRONG><a name="[72]"></a>input_build</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nnom_input.o(i.input_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = input_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_input.o(i.input_s)
</UL>
<P><STRONG><a name="[71]"></a>input_run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nnom_input.o(i.input_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = input_run &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_input.o(i.input_s)
</UL>
<P><STRONG><a name="[124]"></a>input_s</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nnom_input.o(i.input_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = input_s &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr_v
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
</UL>

<P><STRONG><a name="[b2]"></a>io_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nnom_layers.o(i.io_init))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softmax
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Concat
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxPool
</UL>

<P><STRONG><a name="[117]"></a>kernel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nnom_layers.o(i.kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kernel &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[127]"></a>layer_run</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nnom.o(i.layer_run), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
</UL>

<P><STRONG><a name="[115]"></a>local_convolve_HWC_q15_nonsquare</STRONG> (Thumb, 432 bytes, Stack size 128 bytes, nnom_local_q15.o(i.local_convolve_HWC_q15_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = local_convolve_HWC_q15_nonsquare
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[114]"></a>local_convolve_HWC_q7_nonsquare</STRONG> (Thumb, 410 bytes, Stack size 120 bytes, nnom_local.o(i.local_convolve_HWC_q7_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = local_convolve_HWC_q7_nonsquare
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[134]"></a>local_maxpool_q7_HWC</STRONG> (Thumb, 164 bytes, Stack size 52 bytes, nnom_local.o(i.local_maxpool_q7_HWC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = local_maxpool_q7_HWC
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_run
</UL>

<P><STRONG><a name="[12b]"></a>local_softmax_q7</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nnom_local.o(i.local_softmax_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = local_softmax_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_USAT
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_run
</UL>

<P><STRONG><a name="[5e]"></a>main</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = main &rArr; draw_touch_position &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processingdata
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_Leds
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13f]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[66]"></a>maxpool_build</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, nnom_maxpool.o(i.maxpool_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = maxpool_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_maxpool.o(i.MaxPool)
</UL>
<P><STRONG><a name="[65]"></a>maxpool_run</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, nnom_maxpool.o(i.maxpool_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = maxpool_run &rArr; arm_maxpool_q7_HWC &rArr; compare_and_replace_if_larger_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_maxpool_q7_HWC
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_maxpool_q7_HWC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_maxpool.o(i.MaxPool)
</UL>
<P><STRONG><a name="[135]"></a>maxpool_s</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, nnom_maxpool.o(i.maxpool_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = maxpool_s &rArr; MaxPool &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxPool
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[136]"></a>mem_analysis_result</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nnom.o(i.mem_analysis_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mem_analysis_result &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[138]"></a>model_compile</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, nnom.o(i.model_compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_mem_set
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tailed_activation
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_analysis_result
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mem_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[133]"></a>model_run</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nnom.o(i.model_run))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>model_run_to</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, nnom.o(i.model_run_to), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_run
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[13d]"></a>new_model</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nnom.o(i.new_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = new_model &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[10e]"></a>new_tensor</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nnom_tensor.o(i.new_tensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_build
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_build
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_build
</UL>

<P><STRONG><a name="[107]"></a>nnom_alignto</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nnom.o(i.nnom_alignto))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[10c]"></a>nnom_hook_length</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nnom.o(i.nnom_hook_length))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[b1]"></a>nnom_mem</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nnom.o(i.nnom_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softmax
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Concat
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxPool
</UL>

<P><STRONG><a name="[78]"></a>output_run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nnom_output.o(i.output_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = output_run &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_output.o(i.output_s)
</UL>
<P><STRONG><a name="[141]"></a>output_s</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nnom_output.o(i.output_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = output_s &rArr; input_s &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[132]"></a>processingdata</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, main.o(i.processingdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = processingdata &rArr; BSP_LCD_FillRect &rArr; BSP_LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ReadPixel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>set_tailed_activation</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nnom.o(i.set_tailed_activation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_tailed_activation &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[11d]"></a>shape</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, nnom_layers.o(i.shape))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = shape
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dilation
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
</UL>

<P><STRONG><a name="[68]"></a>softmax_build</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nnom_softmax.o(i.softmax_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = softmax_build &rArr; new_tensor &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_softmax.o(i.Softmax)
</UL>
<P><STRONG><a name="[67]"></a>softmax_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nnom_softmax.o(i.softmax_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = softmax_run &rArr; local_softmax_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_softmax.o(i.Softmax)
</UL>
<P><STRONG><a name="[140]"></a>softmax_s</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nnom_softmax.o(i.softmax_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = softmax_s &rArr; Softmax &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softmax
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[118]"></a>stride</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nnom_layers.o(i.stride))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stride &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[10f]"></a>tensor_cpy_attr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nnom_tensor.o(i.tensor_cpy_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tensor_cpy_attr &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_build
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_build
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_build
</UL>

<P><STRONG><a name="[10d]"></a>tensor_get_num_channel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nnom_tensor.o(i.tensor_get_num_channel))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_build
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_build
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_build
</UL>

<P><STRONG><a name="[13a]"></a>tensor_mem_set</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nnom.o(i.tensor_mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[11b]"></a>tensor_set_attr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nnom_tensor.o(i.tensor_set_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tensor_set_attr &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
</UL>

<P><STRONG><a name="[125]"></a>tensor_set_attr_v</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nnom_tensor.o(i.tensor_set_attr_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tensor_set_attr_v &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
</UL>

<P><STRONG><a name="[106]"></a>tensor_size</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nnom_tensor.o(i.tensor_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tensor_size
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relu_run
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_mem_size
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_run
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_run
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_run
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_run
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[d3]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[d2]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[c1]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[c2]"></a>I2C_TransferConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[c0]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[c3]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[d4]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[96]"></a>DrawChar</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, stm32f723e_discovery_lcd.o(i.DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>

<P><STRONG><a name="[b5]"></a>FMC_BANK2_Init</STRONG> (Thumb, 92 bytes, Stack size 120 bytes, stm32f723e_discovery.o(i.FMC_BANK2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FMC_BANK2_Init &rArr; FMC_BANK2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[b6]"></a>FMC_BANK2_MspInit</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stm32f723e_discovery.o(i.FMC_BANK2_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FMC_BANK2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_Init
</UL>

<P><STRONG><a name="[d5]"></a>I2Cx_Error</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f723e_discovery.o(i.I2Cx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2Cx_Error &rArr; HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[d6]"></a>I2Cx_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f723e_discovery.o(i.I2Cx_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>

<P><STRONG><a name="[d8]"></a>I2Cx_MspInit</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, stm32f723e_discovery.o(i.I2Cx_MspInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[d9]"></a>I2Cx_ReadMultiple</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32f723e_discovery.o(i.I2Cx_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>

<P><STRONG><a name="[130]"></a>CPU_CACHE_Enable</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, main.o(i.CPU_CACHE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CPU_CACHE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>SystemClock_Config</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>nnom_model_create</STRONG> (Thumb, 670 bytes, Stack size 32 bytes, main.o(i.nnom_model_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nnom_model_create &rArr; model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_s
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxpool_s
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;concat_s
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_relu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>ST7789H2_DrawRGBHLine</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, st7789h2.o(i.ST7789H2_DrawRGBHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7789H2_DrawRGBHLine &rArr; ST7789H2_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBImage
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawBitmap
</UL>

<P><STRONG><a name="[12a]"></a>__NNOM_SSAT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nnom_local.o(i.__NNOM_SSAT))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q7
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q7_nonsquare
</UL>

<P><STRONG><a name="[12c]"></a>__NNOM_USAT</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nnom_local.o(i.__NNOM_USAT))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q7
</UL>

<P><STRONG><a name="[129]"></a>__NNOM_SSAT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nnom_local_q15.o(i.__NNOM_SSAT))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
</UL>

<P><STRONG><a name="[105]"></a>allocate_block</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nnom.o(i.allocate_block))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[137]"></a>find_last</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nnom.o(i.find_last))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_add
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[126]"></a>io_mem_size</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nnom.o(i.io_mem_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = io_mem_size &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
</UL>

<P><STRONG><a name="[77]"></a>model_active</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nnom.o(i.model_active))
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[73]"></a>model_add</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nnom.o(i.model_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = model_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[74]"></a>model_hook</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nnom.o(i.model_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = model_hook &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_mergex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[75]"></a>model_merge</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nnom.o(i.model_merge))
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[76]"></a>model_mergex</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nnom.o(i.model_mergex))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = model_mergex &rArr; model_hook &rArr; nnom_mem &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom.o(i.new_model)
</UL>
<P><STRONG><a name="[108]"></a>print_layer_info</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, nnom.o(i.print_layer_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_layer_info &rArr; io_mem_size &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_mem_size
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[109]"></a>print_memory_block_info</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nnom.o(i.print_memory_block_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_memory_block_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[143]"></a>release_block</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nnom.o(i.release_block))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_input_mem
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_comp_mem
</UL>

<P><STRONG><a name="[10b]"></a>release_comp_mem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nnom.o(i.release_comp_mem))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[10a]"></a>release_input_mem</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nnom.o(i.release_input_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = release_input_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[6a]"></a>relu_run</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nnom_activation.o(i.relu_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = relu_run &rArr; arm_relu_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q7
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_relu_q15
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nnom_activation.o(i.act_relu)
</UL>
<P><STRONG><a name="[101]"></a>compare_and_replace_if_larger_q7</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, arm_pool_q7_hwc.o(i.compare_and_replace_if_larger_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = compare_and_replace_if_larger_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_maxpool_q7_HWC
</UL>

<P><STRONG><a name="[ec]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$6
</UL>

<P><STRONG><a name="[ef]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ed]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
