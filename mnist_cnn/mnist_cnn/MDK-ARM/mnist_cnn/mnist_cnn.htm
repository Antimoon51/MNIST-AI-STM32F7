<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [mnist_cnn\mnist_cnn.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image mnist_cnn\mnist_cnn.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 05 15:30:15 2020
<BR><P>
<H3>Maximum Stack Usage =        480 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Touchscreen_Calibration &rArr; TouchScreen_Calibration_GetPhysValues &rArr; TouchScreen_Calibration_WaitForPressedState &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">ADC_IRQHandler</a><BR>
 <LI><a href="#[22]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">BusFault_Handler</a><BR>
 <LI><a href="#[20]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">HardFault_Handler</a><BR>
 <LI><a href="#[21]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">MemManage_Handler</a><BR>
 <LI><a href="#[23]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3a]">ADC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[22]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3c]">CAN1_RX0_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3d]">CAN1_RX1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3e]">CAN1_SCE_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3b]">CAN1_TX_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream0_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream6_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[57]">DMA1_Stream7_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream0_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream6_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream7_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[25]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2e]">EXTI0_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[50]">EXTI15_10_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2f]">EXTI1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[30]">EXTI2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[31]">EXTI3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[32]">EXTI4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[3f]">EXTI9_5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2c]">FLASH_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[58]">FMC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[71]">FPU_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[20]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[48]">I2C1_ER_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[47]">I2C1_EV_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4a]">I2C2_ER_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[49]">I2C2_EV_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[6b]">I2C3_ER_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[6a]">I2C3_EV_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[79]">LPTIM1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[21]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[1f]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[65]">OTG_FS_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[52]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[6d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[6c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[6f]">OTG_HS_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[6e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[29]">PVD_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[26]">PendSV_Handler</a> from stm32f7xx_it.o(i.PendSV_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[78]">QUADSPI_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2d]">RCC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[70]">RNG_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[51]">RTC_Alarm_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[2b]">RTC_WKUP_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[1e]">Reset_Handler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[76]">SAI1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[77]">SAI2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[59]">SDMMC1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[7a]">SDMMC2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4b]">SPI1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4c]">SPI2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5b]">SPI3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[74]">SPI4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[75]">SPI5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[d]">ST7789H2_DisplayOff</a> from st7789h2.o(i.ST7789H2_DisplayOff) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[c]">ST7789H2_DisplayOn</a> from st7789h2.o(i.ST7789H2_DisplayOn) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[16]">ST7789H2_DrawBitmap</a> from st7789h2.o(i.ST7789H2_DrawBitmap) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[12]">ST7789H2_DrawHLine</a> from st7789h2.o(i.ST7789H2_DrawHLine) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[17]">ST7789H2_DrawRGBImage</a> from st7789h2.o(i.ST7789H2_DrawRGBImage) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[13]">ST7789H2_DrawVLine</a> from st7789h2.o(i.ST7789H2_DrawVLine) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[15]">ST7789H2_GetLcdPixelHeight</a> from st7789h2.o(i.ST7789H2_GetLcdPixelHeight) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[14]">ST7789H2_GetLcdPixelWidth</a> from st7789h2.o(i.ST7789H2_GetLcdPixelWidth) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[a]">ST7789H2_Init</a> from st7789h2.o(i.ST7789H2_Init) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[b]">ST7789H2_ReadID</a> from st7789h2.o(i.ST7789H2_ReadID) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[10]">ST7789H2_ReadPixel</a> from st7789h2.o(i.ST7789H2_ReadPixel) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[e]">ST7789H2_SetCursor</a> from st7789h2.o(i.ST7789H2_SetCursor) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[11]">ST7789H2_SetDisplayWindow</a> from st7789h2.o(i.ST7789H2_SetDisplayWindow) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[f]">ST7789H2_WritePixel</a> from st7789h2.o(i.ST7789H2_WritePixel) referenced 2 times from st7789h2.o(.data)
 <LI><a href="#[24]">SVC_Handler</a> from stm32f7xx_it.o(i.SVC_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[27]">SysTick_Handler</a> from stm32f7xx_it.o(i.SysTick_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[7c]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f723xx.o(.text)
 <LI><a href="#[2a]">TAMP_STAMP_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[40]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[43]">TIM1_CC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[42]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[41]">TIM1_UP_TIM10_IRQHandler</a> from stm32f7xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[44]">TIM2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[45]">TIM3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[46]">TIM4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5a]">TIM5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5e]">TIM6_DAC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5f]">TIM7_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[53]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[56]">TIM8_CC_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[55]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[54]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5c]">UART4_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[5d]">UART5_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[72]">UART7_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[73]">UART8_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4d]">USART1_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4e]">USART2_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[4f]">USART3_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[69]">USART6_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[23]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[28]">WWDG_IRQHandler</a> from startup_stm32f723xx.o(.text) referenced from startup_stm32f723xx.o(RESET)
 <LI><a href="#[7d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f723xx.o(.text)
 <LI><a href="#[7e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[18]">forward_conv2d_nl_pool</a> from layers_conv2d_generic_float.o(i.forward_conv2d_nl_pool) referenced 4 times from network.o(.data)
 <LI><a href="#[1b]">forward_dense</a> from layers_conv2d_generic_float.o(i.forward_dense) referenced 6 times from network.o(.data)
 <LI><a href="#[1c]">forward_relu</a> from layers_nl_generic_float.o(i.forward_relu) referenced 4 times from network.o(.data)
 <LI><a href="#[1d]">forward_sm</a> from layers_nl_generic_float.o(i.forward_sm) referenced 2 times from network.o(.data)
 <LI><a href="#[0]">ft6x06_Init</a> from ft6x06.o(i.ft6x06_Init) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[1]">ft6x06_ReadID</a> from ft6x06.o(i.ft6x06_ReadID) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[2]">ft6x06_Reset</a> from ft6x06.o(i.ft6x06_Reset) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[7]">ft6x06_TS_ClearIT</a> from ft6x06.o(i.ft6x06_TS_ClearIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[4]">ft6x06_TS_DetectTouch</a> from ft6x06.o(i.ft6x06_TS_DetectTouch) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[9]">ft6x06_TS_DisableIT</a> from ft6x06.o(i.ft6x06_TS_DisableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[6]">ft6x06_TS_EnableIT</a> from ft6x06.o(i.ft6x06_TS_EnableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[5]">ft6x06_TS_GetXY</a> from ft6x06.o(i.ft6x06_TS_GetXY) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[8]">ft6x06_TS_ITStatus</a> from ft6x06.o(i.ft6x06_TS_ITStatus) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[3]">ft6x06_TS_Start</a> from ft6x06.o(i.ft6x06_TS_Start) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[7f]">func_dummy</a> from layers_conv2d_generic_float.o(i.func_dummy) referenced from layers_conv2d_generic_float.o(i.forward_conv2d_nl_pool)
 <LI><a href="#[7b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[19]">nl_func_relu_array_f32</a> from layers_nl_generic_float.o(i.nl_func_relu_array_f32) referenced 4 times from network.o(.data)
 <LI><a href="#[1a]">pool_func_mp_array_f32</a> from layers_pool_generic_float.o(i.pool_func_mp_array_f32) referenced 4 times from network.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[80]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[91]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[155]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[156]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[157]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[158]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[159]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Pred
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[128]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[160]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[162]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[163]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[164]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>BSP_LCD_Clear</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_Clear &rArr; BSP_LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchscreenCalibration_SetHint
</UL>

<P><STRONG><a name="[96]"></a>BSP_LCD_DisplayChar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_DisplayChar &rArr; DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[98]"></a>BSP_LCD_DisplayStringAt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DisplayStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAtLine
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchscreen_Calibration
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchscreenCalibration_SetHint
</UL>

<P><STRONG><a name="[99]"></a>BSP_LCD_DisplayStringAtLine</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DisplayStringAtLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LCD_DisplayStringAtLine &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>BSP_LCD_DrawCircle</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_DrawCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
</UL>

<P><STRONG><a name="[95]"></a>BSP_LCD_DrawHLine</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>

<P><STRONG><a name="[9b]"></a>BSP_LCD_DrawPixel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_DrawPixel))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>

<P><STRONG><a name="[9c]"></a>BSP_LCD_FillCircle</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LCD_FillCircle &rArr; BSP_LCD_DrawCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Calibration_GetPhysValues
</UL>

<P><STRONG><a name="[9d]"></a>BSP_LCD_FillRect</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_FillRect &rArr; BSP_LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processingdata
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[94]"></a>BSP_LCD_GetXSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchscreen_Calibration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[93]"></a>BSP_LCD_GetYSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_GetYSize))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchscreen_Calibration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchscreenCalibration_SetHint
</UL>

<P><STRONG><a name="[9e]"></a>BSP_LCD_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LCD_Init &rArr; BSP_LCD_InitEx &rArr; BSP_LCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>BSP_LCD_InitEx</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LCD_InitEx &rArr; BSP_LCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetOrientation
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[a0]"></a>BSP_LCD_MspInit</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[153]"></a>BSP_LCD_ReadPixel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_ReadPixel))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processingdata
</UL>

<P><STRONG><a name="[105]"></a>BSP_LCD_SetBackColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_SetBackColor))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchscreen_Calibration
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchscreenCalibration_SetHint
</UL>

<P><STRONG><a name="[106]"></a>BSP_LCD_SetFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchscreenCalibration_SetHint
</UL>

<P><STRONG><a name="[102]"></a>BSP_LCD_SetTextColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f723e_discovery_lcd.o(i.BSP_LCD_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchscreen_Calibration
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processingdata
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchscreenCalibration_SetHint
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Calibration_GetPhysValues
</UL>

<P><STRONG><a name="[a5]"></a>BSP_PB_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.BSP_PB_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
</UL>

<P><STRONG><a name="[a7]"></a>BSP_PB_Init</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32f723e_discovery.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>BSP_TS_GetState</STRONG> (Thumb, 302 bytes, Stack size 64 bytes, stm32f723e_discovery_ts.o(i.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetTouchInfo
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Get_GestureId
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Calibration_WaitForPressedState
</UL>

<P><STRONG><a name="[ac]"></a>BSP_TS_Get_GestureId</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32f723e_discovery_ts.o(i.BSP_TS_Get_GestureId))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetGestureID
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>

<P><STRONG><a name="[ae]"></a>BSP_TS_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f723e_discovery_ts.o(i.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_TS_Init &rArr; BSP_TS_InitEx
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_InitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchscreen_Calibration
</UL>

<P><STRONG><a name="[af]"></a>BSP_TS_InitEx</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stm32f723e_discovery_ts.o(i.BSP_TS_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_TS_InitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
</UL>

<P><STRONG><a name="[22]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>CheckForUserInput</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.CheckForUserInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckForUserInput &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Calibration_WaitForPressedState
</UL>

<P><STRONG><a name="[25]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[d8]"></a>FMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32f7xx_ll_fmc.o(i.FMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[d6]"></a>FMC_NORSRAM_Init</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, stm32f7xx_ll_fmc.o(i.FMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[d7]"></a>FMC_NORSRAM_Timing_Init</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f7xx_ll_fmc.o(i.FMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32f7xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_CRC_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f7xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crc.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Calibration_WaitForPressedState
</UL>

<P><STRONG><a name="[c6]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 310 bytes, Stack size 36 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_MspInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>

<P><STRONG><a name="[a6]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>

<P><STRONG><a name="[a1]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MspInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[b7]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Calibration_WaitForPressedState
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[ba]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>

<P><STRONG><a name="[e9]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_I2C_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[c3]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, stm32f7xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>

<P><STRONG><a name="[bb]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[bd]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[c7]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fc]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1108 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d2]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d3]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 888 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b3]"></a>HAL_SRAM_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f7xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Timing_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fmc.o(i.HAL_SRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[dc]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[20]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>LCD_IO_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.LCD_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_IO_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DisplayOff
</UL>

<P><STRONG><a name="[ee]"></a>LCD_IO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.LCD_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_IO_Init &rArr; FMC_BANK2_Init &rArr; HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadID
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_Init
</UL>

<P><STRONG><a name="[f9]"></a>LCD_IO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.LCD_IO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadReg
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadPixel
</UL>

<P><STRONG><a name="[ef]"></a>LCD_IO_WriteData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f723e_discovery.o(i.LCD_IO_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WritePixel
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawHLine
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBHLine
</UL>

<P><STRONG><a name="[fa]"></a>LCD_IO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.LCD_IO_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadReg
</UL>

<P><STRONG><a name="[f1]"></a>MX_CRC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, crc.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>MX_X_CUBE_AI_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_x-cube-ai.o(i.MX_X_CUBE_AI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MX_X_CUBE_AI_Init &rArr; aiInit &rArr; ai_network_init &rArr; ai_platform_network_post_init &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>Reset_Pred</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(i.Reset_Pred))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reset_Pred
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>ST7789H2_DisplayOff</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ST7789H2_DisplayOff &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ST7789H2_DisplayOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ST7789H2_DisplayOn &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>ST7789H2_DrawBitmap</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, st7789h2.o(i.ST7789H2_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST7789H2_DrawBitmap &rArr; ST7789H2_DrawRGBHLine &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>ST7789H2_DrawHLine</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7789H2_DrawHLine &rArr; ST7789H2_SetCursor &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>ST7789H2_DrawRGBImage</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, st7789h2.o(i.ST7789H2_DrawRGBImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST7789H2_DrawRGBImage &rArr; ST7789H2_DrawRGBHLine &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>ST7789H2_DrawVLine</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, st7789h2.o(i.ST7789H2_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST7789H2_DrawVLine &rArr; ST7789H2_WritePixel &rArr; ST7789H2_SetCursor &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WritePixel
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>ST7789H2_GetLcdPixelHeight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st7789h2.o(i.ST7789H2_GetLcdPixelHeight))
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>ST7789H2_GetLcdPixelWidth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st7789h2.o(i.ST7789H2_GetLcdPixelWidth))
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ST7789H2_Init</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, st7789h2.o(i.ST7789H2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ST7789H2_Init &rArr; LCD_IO_Init &rArr; FMC_BANK2_Init &rArr; HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Delay
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DisplayOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ST7789H2_ReadID</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ST7789H2_ReadID &rArr; LCD_IO_Init &rArr; FMC_BANK2_Init &rArr; HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>ST7789H2_ReadPixel</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_ReadPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7789H2_ReadPixel &rArr; ST7789H2_SetCursor &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[f8]"></a>ST7789H2_ReadReg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7789H2_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadID
</UL>

<P><STRONG><a name="[e]"></a>ST7789H2_SetCursor</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ST7789H2_SetCursor &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WritePixel
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadPixel
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawVLine
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBImage
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawHLine
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ST7789H2_SetDisplayWindow</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, st7789h2.o(i.ST7789H2_SetDisplayWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ST7789H2_SetDisplayWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>ST7789H2_SetOrientation</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_SetOrientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ST7789H2_SetOrientation &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_InitEx
</UL>

<P><STRONG><a name="[f]"></a>ST7789H2_WritePixel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, st7789h2.o(i.ST7789H2_WritePixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7789H2_WritePixel &rArr; ST7789H2_SetCursor &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawVLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7789h2.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>ST7789H2_WriteReg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, st7789h2.o(i.ST7789H2_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteReg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WritePixel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetOrientation
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_SetCursor
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_ReadPixel
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_Init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawVLine
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawHLine
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DisplayOn
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DisplayOff
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBHLine
</UL>

<P><STRONG><a name="[24]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>SystemClock_Config</STRONG> (Thumb, 180 bytes, Stack size 216 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[fd]"></a>TS_IO_Init</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, stm32f723e_discovery.o(i.TS_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TS_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_Init
</UL>

<P><STRONG><a name="[fe]"></a>TS_IO_Read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stm32f723e_discovery.o(i.TS_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetGestureID
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DetectTouch
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_ReadID
</UL>

<P><STRONG><a name="[ff]"></a>TS_IO_ReadMultiple</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f723e_discovery.o(i.TS_IO_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetXY
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_GetTouchInfo
</UL>

<P><STRONG><a name="[100]"></a>TS_IO_Write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, stm32f723e_discovery.o(i.TS_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_EnableIT
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DisableIT
</UL>

<P><STRONG><a name="[13f]"></a>TouchScreen_Get_Calibrated_X</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ts_calibration.o(i.TouchScreen_Get_Calibrated_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchScreen_Get_Calibrated_X
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[140]"></a>TouchScreen_Get_Calibrated_Y</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ts_calibration.o(i.TouchScreen_Get_Calibrated_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TouchScreen_Get_Calibrated_Y
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
</UL>

<P><STRONG><a name="[107]"></a>Touchscreen_Calibration</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ts_calibration.o(i.Touchscreen_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Touchscreen_Calibration &rArr; TouchScreen_Calibration_GetPhysValues &rArr; TouchScreen_Calibration_WaitForPressedState &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchscreenCalibration_SetHint
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Calibration_GetPhysValues
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f723xx.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[166]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[151]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[168]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[10f]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[12b]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[10a]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_channel_f32
</UL>

<P><STRONG><a name="[169]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[110]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[10d]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[10e]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[10c]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[16a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[16c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10b]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[f4]"></a>aiInit</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, app_x-cube-ai.o(i.aiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = aiInit &rArr; ai_network_init &rArr; ai_platform_network_post_init &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_data_weights_get
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_error
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_destroy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[125]"></a>aiRun</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_x-cube-ai.o(i.aiRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = aiRun &rArr; ai_network_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_run
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>ai_array_get_byte_size</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, ai_datatypes_format.o(i.ai_array_get_byte_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ai_array_get_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_byte_size
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[116]"></a>ai_array_to_buffer_fmt</STRONG> (Thumb, 202 bytes, Stack size 12 bytes, ai_datatypes_format.o(i.ai_array_to_buffer_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ai_array_to_buffer_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[127]"></a>ai_check_custom_types</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, layers.o(i.ai_check_custom_types))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[145]"></a>ai_dict4_dot_array_f32</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, layers_conv2d_generic_float.o(i.ai_dict4_dot_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_dict4_dot_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[144]"></a>ai_dict8_dot_array_f32</STRONG> (Thumb, 246 bytes, Stack size 20 bytes, layers_conv2d_generic_float.o(i.ai_dict8_dot_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_dict8_dot_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[143]"></a>ai_dict_decompress_f32</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, layers_conv2d_generic_float.o(i.ai_dict_decompress_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_dict_decompress_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[12e]"></a>ai_layers_forward_all</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, layers.o(i.ai_layers_forward_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_layers_forward_all &rArr; ai_forward_layer
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[121]"></a>ai_network_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, network.o(i.ai_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_network_create &rArr; ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[120]"></a>ai_network_data_weights_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network_data.o(i.ai_network_data_weights_get))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[124]"></a>ai_network_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(i.ai_network_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ai_network_destroy &rArr; ai_platform_network_destroy &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[123]"></a>ai_network_get_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(i.ai_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ai_network_get_error &rArr; ai_platform_network_get_error &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiRun
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[122]"></a>ai_network_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, network.o(i.ai_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_network_init &rArr; ai_platform_network_post_init &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_weights
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_activations
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[126]"></a>ai_network_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(i.ai_network_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ai_network_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiRun
</UL>

<P><STRONG><a name="[138]"></a>ai_platform_context_acquire</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_context_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_destroy
</UL>

<P><STRONG><a name="[130]"></a>ai_platform_network_create</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ai_platform_interface.o(i.ai_platform_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create
</UL>

<P><STRONG><a name="[131]"></a>ai_platform_network_destroy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_network_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ai_platform_network_destroy &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_destroy
</UL>

<P><STRONG><a name="[132]"></a>ai_platform_network_get_error</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ai_platform_network_get_error &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_error
</UL>

<P><STRONG><a name="[133]"></a>ai_platform_network_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ai_platform_network_init &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[136]"></a>ai_platform_network_post_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_post_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ai_platform_network_post_init &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[137]"></a>ai_platform_network_process</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_run
</UL>

<P><STRONG><a name="[118]"></a>ai_platform_network_set_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_platform_interface.o(i.ai_platform_network_set_error))
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[13b]"></a>core_get_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core_common.o(i.core_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>

<P><STRONG><a name="[13a]"></a>core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_common.o(i.core_init))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[13c]"></a>core_set_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, core_common.o(i.core_set_error))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
</UL>

<P><STRONG><a name="[13e]"></a>draw_touch_position</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, main.o(i.draw_touch_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = draw_touch_position &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Get_Calibrated_Y
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Get_Calibrated_X
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>forward_conv2d_nl_pool</STRONG> (Thumb, 1148 bytes, Stack size 280 bytes, layers_conv2d_generic_float.o(i.forward_conv2d_nl_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = forward_conv2d_nl_pool &rArr; ai_conv2d_stripe_f32 &rArr; ai_conv2d_kernel_simple_opt_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_dict_decompress_f32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_stride
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_ptr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_byte_size
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>forward_dense</STRONG> (Thumb, 396 bytes, Stack size 112 bytes, layers_conv2d_generic_float.o(i.forward_dense))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = forward_dense &rArr; ai_dict4_dot_array_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_dict8_dot_array_f32
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_dict4_dot_array_f32
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ai_math_dot_array_opt
</UL>
<BR>[Address Reference Count : 3]<UL><LI> network.o(.data)
<LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>forward_relu</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, layers_nl_generic_float.o(i.forward_relu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = forward_relu &rArr; nl_func_relu_thresholded_array_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_relu_array_f32
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_relu_thresholded_array_f32
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_relu_generic_array_f32
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>forward_sm</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.forward_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = forward_sm &rArr; nl_func_sm_array_f32 &rArr; nl_func_sm_channel_f32 &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_array_f32
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>ft6x06_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ft6x06_Init &rArr; TS_IO_Init &rArr; I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_GetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>ft6x06_ReadID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ft6x06.o(i.ft6x06_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ft6x06_ReadID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>ft6x06_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>ft6x06_TS_ClearIT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ClearIT))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ft6x06_TS_DetectTouch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft6x06_TS_DetectTouch &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ft6x06_TS_DisableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ft6x06_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>ft6x06_TS_EnableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ft6x06_TS_EnableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>ft6x06_TS_GetGestureID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ft6x06.o(i.ft6x06_TS_GetGestureID))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Get_GestureId
</UL>

<P><STRONG><a name="[ab]"></a>ft6x06_TS_GetTouchInfo</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ft6x06.o(i.ft6x06_TS_GetTouchInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft6x06_TS_GetTouchInfo &rArr; TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>

<P><STRONG><a name="[5]"></a>ft6x06_TS_GetXY</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ft6x06.o(i.ft6x06_TS_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ft6x06_TS_GetXY &rArr; TS_IO_ReadMultiple &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ft6x06_TS_ITStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_ITStatus))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>ft6x06_TS_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ft6x06_TS_Start &rArr; ft6x06_TS_DisableIT &rArr; TS_IO_Write &rArr; I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_TS_DisableIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>main</STRONG> (Thumb, 568 bytes, Stack size 104 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = main &rArr; Touchscreen_Calibration &rArr; TouchScreen_Calibration_GetPhysValues &rArr; TouchScreen_Calibration_WaitForPressedState &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAtLine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchscreen_Calibration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processingdata
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_touch_position
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Pred
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiRun
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[19]"></a>nl_func_relu_array_f32</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, layers_nl_generic_float.o(i.nl_func_relu_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nl_func_relu_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[148]"></a>nl_func_relu_generic_array_f32</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, layers_nl_generic_float.o(i.nl_func_relu_generic_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nl_func_relu_generic_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>

<P><STRONG><a name="[149]"></a>nl_func_relu_thresholded_array_f32</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, layers_nl_generic_float.o(i.nl_func_relu_thresholded_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nl_func_relu_thresholded_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>

<P><STRONG><a name="[14a]"></a>nl_func_sm_array_f32</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.nl_func_sm_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nl_func_sm_array_f32 &rArr; nl_func_sm_channel_f32 &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_channel_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
</UL>

<P><STRONG><a name="[152]"></a>nl_func_sm_channel_f32</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.nl_func_sm_channel_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nl_func_sm_channel_f32 &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_array_f32
</UL>

<P><STRONG><a name="[1a]"></a>pool_func_mp_array_f32</STRONG> (Thumb, 412 bytes, Stack size 68 bytes, layers_pool_generic_float.o(i.pool_func_mp_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pool_func_mp_array_f32
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[14f]"></a>processingdata</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, main.o(i.processingdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = processingdata &rArr; BSP_LCD_FillRect &rArr; BSP_LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_ReadPixel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14b]"></a>ft6x06_GetInstance</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ft6x06.o(i.ft6x06_GetInstance))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_Init
</UL>

<P><STRONG><a name="[f7]"></a>ST7789H2_DrawRGBHLine</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, st7789h2.o(i.ST7789H2_DrawRGBHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7789H2_DrawRGBHLine &rArr; ST7789H2_WriteReg &rArr; LCD_IO_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawRGBImage
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7789H2_DrawBitmap
</UL>

<P><STRONG><a name="[b1]"></a>FMC_BANK2_Init</STRONG> (Thumb, 92 bytes, Stack size 120 bytes, stm32f723e_discovery.o(i.FMC_BANK2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FMC_BANK2_Init &rArr; HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_Init
</UL>

<P><STRONG><a name="[b2]"></a>FMC_BANK2_MspInit</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stm32f723e_discovery.o(i.FMC_BANK2_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FMC_BANK2_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_BANK2_Init
</UL>

<P><STRONG><a name="[f0]"></a>FMC_BANK2_WriteData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f723e_discovery.o(i.FMC_BANK2_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IO_WriteData
</UL>

<P><STRONG><a name="[e7]"></a>I2Cx_Error</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f723e_discovery.o(i.I2Cx_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2Cx_Error &rArr; HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_WriteMultiple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_ReadMultiple
</UL>

<P><STRONG><a name="[e8]"></a>I2Cx_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f723e_discovery.o(i.I2Cx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = I2Cx_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>

<P><STRONG><a name="[ea]"></a>I2Cx_MspInit</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, stm32f723e_discovery.o(i.I2Cx_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2Cx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[eb]"></a>I2Cx_ReadMultiple</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32f723e_discovery.o(i.I2Cx_ReadMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_ReadMultiple
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>

<P><STRONG><a name="[ec]"></a>I2Cx_WriteMultiple</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, stm32f723e_discovery.o(i.I2Cx_WriteMultiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = I2Cx_WriteMultiple &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>

<P><STRONG><a name="[97]"></a>DrawChar</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, stm32f723e_discovery_lcd.o(i.DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayChar
</UL>

<P><STRONG><a name="[135]"></a>network_configure_activations</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, network.o(i.network_configure_activations))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = network_configure_activations
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[134]"></a>network_configure_weights</STRONG> (Thumb, 224 bytes, Stack size 20 bytes, network.o(i.network_configure_weights))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = network_configure_weights
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, fmc.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
</UL>

<P><STRONG><a name="[101]"></a>TouchScreen_Calibration_GetPhysValues</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ts_calibration.o(i.TouchScreen_Calibration_GetPhysValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TouchScreen_Calibration_GetPhysValues &rArr; TouchScreen_Calibration_WaitForPressedState &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillCircle
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Calibration_WaitForPressedState
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchscreen_Calibration
</UL>

<P><STRONG><a name="[103]"></a>TouchScreen_Calibration_WaitForPressedState</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ts_calibration.o(i.TouchScreen_Calibration_WaitForPressedState))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TouchScreen_Calibration_WaitForPressedState &rArr; BSP_TS_GetState &rArr; BSP_TS_Get_GestureId &rArr; ft6x06_TS_GetGestureID &rArr; TS_IO_Read &rArr; I2Cx_ReadMultiple &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForUserInput
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreen_Calibration_GetPhysValues
</UL>

<P><STRONG><a name="[104]"></a>TouchscreenCalibration_SetHint</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, ts_calibration.o(i.TouchscreenCalibration_SetHint))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TouchscreenCalibration_SetHint &rArr; BSP_LCD_DisplayStringAt &rArr; BSP_LCD_DisplayChar &rArr; DrawChar
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetTextColor
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetFont
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetBackColor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DisplayStringAt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touchscreen_Calibration
</UL>

<P><STRONG><a name="[cf]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e6]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[e5]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[c0]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[c4]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[c1]"></a>I2C_TransferConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[bf]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[c2]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[c5]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[139]"></a>CRC_Lock</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, ai_platform_interface.o(i.CRC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>

<P><STRONG><a name="[114]"></a>_platform_network_io_bind</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, ai_platform_interface.o(i._platform_network_io_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[117]"></a>_platform_network_state_setup</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ai_platform_interface.o(i._platform_network_state_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _platform_network_state_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[119]"></a>_platform_network_state_update_input</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ai_platform_interface.o(i._platform_network_state_update_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_network_state_update_input
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[11b]"></a>_platform_network_state_update_output</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ai_platform_interface.o(i._platform_network_state_update_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_network_state_update_output
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[146]"></a>__ai_math_dot_array_opt</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.__ai_math_dot_array_opt))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[12c]"></a>ai_conv2d_kernel_depthwise_f32</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_depthwise_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ai_conv2d_kernel_depthwise_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[12d]"></a>ai_conv2d_kernel_group_f32</STRONG> (Thumb, 378 bytes, Stack size 68 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_group_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_conv2d_kernel_group_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[12a]"></a>ai_conv2d_kernel_simple_opt_f32</STRONG> (Thumb, 370 bytes, Stack size 68 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_simple_opt_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_conv2d_kernel_simple_opt_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[129]"></a>ai_conv2d_stripe_f32</STRONG> (Thumb, 492 bytes, Stack size 128 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_stripe_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ai_conv2d_stripe_f32 &rArr; ai_conv2d_kernel_simple_opt_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_simple_opt_f32
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_group_f32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_depthwise_f32
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[13d]"></a>core_nl_get_params_byte_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_byte_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = core_nl_get_params_byte_size &rArr; ai_array_get_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[141]"></a>core_nl_get_params_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[142]"></a>core_nl_get_params_stride</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_stride))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[7f]"></a>func_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.func_dummy))
<BR>[Address Reference Count : 1]<UL><LI> layers_conv2d_generic_float.o(i.forward_conv2d_nl_pool)
</UL>
<P><STRONG><a name="[147]"></a>ai_shape_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, layers_nl_generic_float.o(i.ai_shape_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>

<P><STRONG><a name="[12f]"></a>ai_forward_layer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, layers.o(i.ai_forward_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
</UL>

<P><STRONG><a name="[112]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[109]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[11d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[111]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
